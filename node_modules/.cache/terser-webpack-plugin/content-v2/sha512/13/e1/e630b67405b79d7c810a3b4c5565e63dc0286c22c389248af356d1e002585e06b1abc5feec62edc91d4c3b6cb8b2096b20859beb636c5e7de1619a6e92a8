{"code":"(this[\"webpackJsonpmeet-app\"]=this[\"webpackJsonpmeet-app\"]||[]).push([[0],{11:function(n,e,t){\"use strict\";t.r(e);var o=t(0),c=t.n(o),a=t(3),i=t.n(a),r=(t(8),t(9),t(1));var s=function(){return Object(r.jsx)(\"div\",{className:\"App\"})};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var u=function(n){n&&n instanceof Function&&t.e(3).then(t.bind(null,12)).then((function(e){var t=e.getCLS,o=e.getFID,c=e.getFCP,a=e.getLCP,i=e.getTTFB;t(n),o(n),c(n),a(n),i(n)}))};i.a.render(Object(r.jsx)(c.a.StrictMode,{children:Object(r.jsx)(s,{})}),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()})).catch((function(n){console.error(n.message)})),u()},8:function(n,e,t){},9:function(n,e,t){}},[[11,1,2]]]);","name":"static/js/main.76de76d2.chunk.js","map":{"version":3,"sources":["static/js/main.76de76d2.chunk.js"],"names":["this","push","module","__webpack_exports__","__webpack_require__","r","react","react_default","n","react_dom","react_dom_default","jsx_runtime","src_App","Object","className","Boolean","window","location","hostname","match","src_reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","a","render","StrictMode","children","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","exports"],"mappings":"CAACA,KAAK,wBAA0BA,KAAK,yBAA2B,IAAIC,KAAK,CAAC,CAAC,GAAG,CAExE,GACA,SAAUC,EAAQC,EAAqBC,GAE7C,aAEAA,EAAoBC,EAAEF,GAGtB,IAAIG,EAAQF,EAAoB,GAC5BG,EAA6BH,EAAoBI,EAAEF,GAGnDG,EAAYL,EAAoB,GAChCM,EAAiCN,EAAoBI,EAAEC,GASvDE,GANMP,EAAoB,GAGpBA,EAAoB,GAGZA,EAAoB,IAGkF,IAAIQ,EAA5H,WAAmB,OAAmBC,OAAOF,EAAiB,IAAxBE,CAA2B,MAAM,CAACC,UAAU,SAWlEC,QAAmC,cAA3BC,OAAOC,SAASC,UACb,UAA3BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MAAM,2DAsB/B,IAAicC,EAA7a,SAAyBC,GAAgBA,GAAaA,aAAuBC,UAAUlB,EAAoBmB,EAAiB,GAAGC,KAAKpB,EAAoBqB,KAAK,KAAM,KAAKD,MAAK,SAASE,GAAM,IAAIC,EAAOD,EAAKC,OAAOC,EAAOF,EAAKE,OAAOC,EAAOH,EAAKG,OAAOC,EAAOJ,EAAKI,OAAOC,EAAQL,EAAKK,QAAQJ,EAAON,GAAaO,EAAOP,GAAaQ,EAAOR,GAAaS,EAAOT,GAAaU,EAAQV,OAE7YX,EAAkBsB,EAAEC,OAAoBpB,OAAOF,EAAiB,IAAxBE,CAA2BN,EAAcyB,EAAEE,WAAW,CAACC,SAAsBtB,OAAOF,EAAiB,IAAxBE,CAA2BD,EAAQ,MAAMwB,SAASC,eAAe,SAJzB,kBAAkBC,WAAWA,UAAUC,cAAcC,MAAMhB,MAAK,SAASiB,GAAcA,EAAaC,gBAAgBC,OAAM,SAASC,GAAOC,QAAQD,MAAMA,EAAME,YAU3T1B,KAIM,EACA,SAAUlB,EAAQ6C,EAAS3C,KAM3B,EACA,SAAUF,EAAQ6C,EAAS3C,MAM/B,CAAC,CAAC,GAAG,EAAE"},"input":"(this[\"webpackJsonpmeet-app\"] = this[\"webpackJsonpmeet-app\"] || []).push([[0],{\n\n/***/ 11:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(3);\nvar react_dom_default = /*#__PURE__*/__webpack_require__.n(react_dom);\n\n// EXTERNAL MODULE: ./src/index.css\nvar src = __webpack_require__(8);\n\n// EXTERNAL MODULE: ./src/App.css\nvar App = __webpack_require__(9);\n\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/App.js\nfunction App_App(){return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"App\"});}/* harmony default export */ var src_App = (App_App);\n// CONCATENATED MODULE: ./src/serviceWorkerRegistration.js\n// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function register(config){if( true&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(\"/meet-app\",window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(\"/meet-app\",\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://cra.link/PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://cra.link/PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}\n// CONCATENATED MODULE: ./src/reportWebVitals.js\nvar reportWebVitals=function reportWebVitals(onPerfEntry){if(onPerfEntry&&onPerfEntry instanceof Function){__webpack_require__.e(/* import() */ 3).then(__webpack_require__.bind(null, 12)).then(function(_ref){var getCLS=_ref.getCLS,getFID=_ref.getFID,getFCP=_ref.getFCP,getLCP=_ref.getLCP,getTTFB=_ref.getTTFB;getCLS(onPerfEntry);getFID(onPerfEntry);getFCP(onPerfEntry);getLCP(onPerfEntry);getTTFB(onPerfEntry);});}};/* harmony default export */ var src_reportWebVitals = (reportWebVitals);\n// CONCATENATED MODULE: ./src/index.js\nreact_dom_default.a.render(/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(react_default.a.StrictMode,{children:/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(src_App,{})}),document.getElementById('root'));// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nunregister();// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nsrc_reportWebVitals();\n\n/***/ }),\n\n/***/ 8:\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ 9:\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ })\n\n},[[11,1,2]]]);","inputSourceMap":{"version":3,"sources":["C:/Users/ASUS/Documents/careerfoundry/meet-app/src/App.js","C:/Users/ASUS/Documents/careerfoundry/meet-app/src/serviceWorkerRegistration.js","C:/Users/ASUS/Documents/careerfoundry/meet-app/src/reportWebVitals.js","C:/Users/ASUS/Documents/careerfoundry/meet-app/src/index.js","C:\\Users\\ASUS\\Documents\\careerfoundry\\meet-app\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\ASUS\\Documents\\careerfoundry\\meet-app\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\ASUS\\Documents\\careerfoundry\\meet-app\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\ASUS\\Documents\\careerfoundry\\meet-app\\src\\index.css","C:\\Users\\ASUS\\Documents\\careerfoundry\\meet-app\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\ASUS\\Documents\\careerfoundry\\meet-app\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\ASUS\\Documents\\careerfoundry\\meet-app\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\ASUS\\Documents\\careerfoundry\\meet-app\\src\\App.css"],"names":["App","isLocalhost","Boolean","window","location","hostname","match","register","config","process","navigator","publicUrl","URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","serviceWorkerRegistration"],"mappings":"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","file":"x","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin"]}}